Code in f:\Backup\Udacity\CodeNEW\ - Long full names more then 100 simbols are not alowed!
Lesson 2:

L02.05
Different Resource Directories

This information can also be found here.
Some Common Resource Types
Name 	What's Stored Here
values 	XML files that contain simple values, such as string or integers
drawable 	A bunch of visual files, including Bitmap file types and shapes. More information is here
layouts 	XML layouts for your app
Other Resource Types
Name 	What's stored here
animator 	XML files for property animations
anim 	XML files for tween animations
color 	XML files that define state list colors
mipmap 	Drawable files for launcher icons
menu 	XML files that define application menus
raw 	Resource file for arbitrary files saved in their raw form. For example, you could put audio files here. (You might also be interested in the assets folder, depending on how you use that audio)
xml 	Arbitrary XML; if you have XML configuration files, this is a good place to put them

L02.09 Fetching an HTTP Request
See this post on StackOverflow:http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string
 for a good discussion on different
 methods of doing this. Also, if you want more information on the okhttp,
 you can find it here: http://square.github.io/okhttp/
 
L02.11 Quiz: Permissions
http://developer.android.com/guide/topics/security/permissions.html 
Main thread ....

L02.15 :AsyncTask
JavaDoc on AsyncTask :https://developer.android.com/reference/android/os/AsyncTask.html

L02.16
GitHub query example:
//https://github.com/search?q=ud851

OkHttp:An HTTP & HTTP/2 client for Android and Java applications:
http://square.github.io/okhttp/
okhttp-3.10.0.jar in \\Lesha\Udacity\DevelopingAndroidApps\zip\

Read/convert an InputStream to a String:
https://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string

Lesson 3:
L03.09: Exercise: Create RecyclerView

Add RecyclerView dependency: to build.gradle (Module: app)
compile 'com.android.support:recyclerview-v7:25.1.0'

L03.10: Items and ViewHolders
Screen compatibility overview (sp - dp, ...):
https://developer.android.com/guide/practices/screens_support

L03.23 Exercise: Click Handling 
SH S03.02-Exercise-RecyclerViewClickHandling
----------------
MainActivity extends AppCompatActivity
        implements ForecastAdapter.ForecastAdapterOnClickHandler{
		
		LinearLayoutManager layoutManager;
		mRecyclerView.setLayoutManager(layoutManager);
		mForecastAdapter = new ForecastAdapter(this);
		mRecyclerView.setAdapter(mForecastAdapter);
		
		void loadWeatherData(){
			location
			new FetchWeatherTask().execute(location);
		}
		
		@Override
    public void onListItemClick(String weatherForDay) {}
	
	public class FetchWeatherTask extends AsyncTask<String, Void, String[]>{}
	
	onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.forecast, menu);
	}
	
	onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == R.id.action_refresh) {}
	}
		
}
======
public class ForecastAdapter 
			extends RecyclerView.Adapter<ForecastAdapter.ForecastAdapterViewHolder> {
	
	final private ForecastAdapterOnClickHandler mClickHandler;	
	public interface ForecastAdapterOnClickHandler {
        void onListItemClick(String weatherForDay);
    }
	
	// TODO (4) Add a ForecastAdapterOnClickHandler as a parameter to the constructor
	//and store it in mClickHandler
    public ForecastAdapter(ForecastAdapterOnClickHandler handler) {
        mClickHandler = handler;
    }
	
	public class ForecastAdapterViewHolder extends RecyclerView.ViewHolder
			implements View.OnClickListener {
        public final TextView mWeatherTextView;
		public ForecastAdapterViewHolder(View view) {
            ...
			view.setOnClickListener(this);
        }
		
		@Override
        public void onClick(View view) {
            int clickedPosition = getAdapterPosition();
			... 
		}
	@Override
    public ForecastAdapterViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
				....
	}
	@Override
    public void onBindViewHolder(ForecastAdapterViewHolder forecastAdapterViewHolder, int position){}
	
	public void setWeatherData(String[] weatherData) {
        mWeatherData = weatherData;
        notifyDataSetChanged();
    }
	
		
	}
}

L05.16 Leveraging Loaders:
3 steps for creating Loader:
	1. Create Loader ID;
	2. Fill in Loader callbacks;
	3. Init Loader with LoaderManager.
	

L06.29: Edit Text Preference Constraints
	OnSharedPreferenceChangeListener - after saving of shared preferences.
	OnPreferenceChangeListener -  - before saving of shared preferences. ...!!!
	
	extends PreferenceFragmentCompat make be able to work with Shared preferences,
	opens:
		SharedPreferences sharedPreferences = getPreferenceScreen().getSharedPreferences();
        PreferenceScreen prefScreen = getPreferenceScreen();
		
	Implementation of OnSharedPreferenceChangeListener on MainActivity gives: -ore without it works!? 
	remains to be checked!
	SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
    sharedPreferences.registerOnSharedPreferenceChangeListener(this);

	Lesson 7:
	
	L07.05
	from the SQLiteDatabase lesson:
		Contract Class
		Projection, selection, selection args, sort order
		Cursor Class

	General Steps for Using a ContentProvider
	You will take the following steps:

    Get permission to use the ContentProvider.
    Get the ContentResolver
    Pick one of four basic actions on the data: query, insert, update, delete
    Identify the data you are reading or manipulating to create a URI
    In the case of reading from the ContentProvider, display the information in the UI
	
Lesson 09b:

Adding Components to your Project --- VERY IMPORTANT!!!!
https://developer.android.com/topic/libraries/architecture/adding-components

L09.26:
At the moment, we have our database logic in our Activities and our ViewModels.
We could improve our architecture by extracting all that logic to a common place,
or Repository. This way, all database-related operations can be handled from a single location,
while being accessible from anywhere in our app. This is an example of using
the Single Responsibility Principle.	

googlecodelabs/android-build-an-app-architecture-components:
https://github.com/googlecodelabs/android-build-an-app-architecture-components

Create an Expandable Notification:
https://developer.android.com/training/notify-user/expanded
Notification.BigPictureStyle:
https://developer.android.com/reference/android/app/Notification.BigPictureStyle

firebase/firebase-jobdispatcher-android:
https://github.com/firebase/firebase-jobdispatcher-android

https://github.com/firebase/firebase-jobdispatcher-android for an example of use
FirebaseJobDispatcher to schedule a job that repeats roughly
every REMINDER_INTERVAL_SECONDS when the phone is charging.

4 major components:
	Activity;
	Service;
	Content Provider;
	Broadcast Receiver.
	
	Lesson 11
	MATERIAL-DESIGN-ICONS
	https://github.com/google/material-design-icons
	Palette:
	https://www.materialpalette.com/purple/purple
	Material Design:
	https://material.io/design/color/#
	
	The type system , Type Scale , fonts
	https://material.io/design/typography/#type-scale
	
	General Steps for Using a ContentProvider you will take the following steps:

		1. Get permission to use the ContentProvider.
		2. Get the ContentResolver
		3. Pick one of four basic actions on the data: query, insert, update, delete
		4. Identify the data you are reading or manipulating to create a URI
		5. In the case of reading from the ContentProvider, display the information in the UI
		
Room:

	Annotation and main components:
	@Entity - define database tables;
	@DAO - to provide an API for reading and writing data;
	@Database - which represents database holder.
	
	@Entity is a POJO with anotation @entity
	@DAO - interface :select,update, delete insert methods;
	To create make abstract class AppDatabase extends RoomDatabase singleton has getInstance method.
	Add @Database anotation @Database(entities={POJO.class}, version = 1, exportScheme = false){
		getInstance(Context context){}
		
		public abstract TascDao tascDao();
	
	}
	
L09b.26:
At the moment, we have our database logic in our Activities and our ViewModels.
 We could improve our architecture by extracting all that logic to a common place,
 or Repository. This way, all database-related operations can be handled from a single
 location, while being accessible from anywhere in our app. This is an example of using
 the Single Responsibility Principle:
 https://en.wikipedia.org/wiki/Single_responsibility_principle
 Using a Repository also adds more flexibility to our architecture. Instead of touching
 code in multiple places whenever we want to change the database, we can instead isolate
 the code change to one place using a Repository.
Check here: https://developer.android.com/topic/libraries/architecture/guide.html#fetching_data
 for more information on how to improve an application by adding a Repository.
 Also, here: https://github.com/googlecodelabs/android-build-an-app-architecture-components/blob/arch-training-steps/app/src/main/java/com/example/android/sunshine/data/SunshineRepository.java
 you can find a simplified version of Sunshine which uses Android Architecture 
 Components together with a Repository.
	


	
	







