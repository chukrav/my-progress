19:52 Wednesday, February 06, 2019

    7.Then create the application MongoDB database user required for this course:

        username: m001-student
        password: m001-mongodb-basics

mongo "mongodb://sandbox-shard-00-00-wy1u1.mongodb.net:27017,sandbox-shard-00-01-wy1u1.mongodb.net:27017,sandbox-shard-00-02-wy1u1.mongodb.net:27017/test?replicaSet=Sandbox-shard-0" --ssl --authenticationDatabase admin --username m001-student --password m001-mongodb-basics
 - for shell conection

Connect to cloude - Big collection
mongo "mongodb://cluster0-shard-00-00-jxeqq.mongodb.net:27017,cluster0-shard-00-01-jxeqq.mongodb.net:27017,cluster0-shard-00-02-jxeqq.mongodb.net:27017/test?replicaSet=Cluster0-shard-0" --authenticationDatabase admin --ssl --username m001-student --password m001-mongodb-basics
i this long ....odb.net:27017/test?replicaSet=Cluster0.... Change test to another knowing : 100YWeatherSmall may be ...
from MangoDB shell  ....
load("loadMovieDetailsDataset.js")
------ In loadMovieDetailsDataset.js : 
db = db.getSiblingDB("video");
db.movieDetails.drop();
db.movieDetails.insertMany([
{"title":"Once Upon a Time in .............},
......
{"title": ...... .,"metacritic":80,"type":"movie"}
]); --------
 
 use video   -switch to video db
 show collections
 db.movies.find().pretty()
 db.moviesScratch.insertOne({title: "Star Treck", year: 1982, imdb: "tt0084726"})
 
 Problem:
When connecting to an Atlas cluster using the shell, why do we provide 
the hostnames for all nodes when we launch mongo? 
 Answer:
 If primary node goes down, we shall connect another instead.
 
Lab 2.0 Week-2 Create Cluster and so ... 
7. Create the application MongoDB database user required for this course:

        username: m001-student
        password: m001-mongodb-basics

You can create new users through Security -> Add New User.

Connecting to Your Sandbox Cluster from Compass
From MongoDB.Atlas take M001-> P: sandbox-shard-00-00-wy1u1.mongodb.net you can see this URL?!
in M001 Student.
Start New ... in Compas !

insertMeny( []   ) or with argument insertMeny( [],{ ordrred: false}   ) not interrupts if insert duplicates!!!

Find:
db.movies.find({mpaaRating: 'PG-13', year: 2009}).pretty()

Filter: wind - Object
{'wind.direction.angle': {$gte: 250,$lt: 300}} '' or "" !!!

db.movieDetails.find({"genres.1": "Western"}).count()
count of movies genres: "Western" on second position exactly.
Cursors ...
Projections ...

db.movieDetails.updateOne(
   {title: "The Martian"},
   { $set{
     poster: "https:// ........... "   }
   })
   
db.movieDetails.updateOne(
   {title: "The Martian"},
   { $set
		{awards:{ <-- it's object!!!
			wins: 18
			nominations: 11
			text:"Won 10 Oscars. Another 18 wins & 11 nominations."}
		}
   })   

   
Upserts ... create docs ?!
Docs of MongoDB:
https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/index.html?searchProperty=current&query=Upserts

upsert: 	boolean 	Optional. If set to true, creates a new document
when no document matches the query criteria. The default value is false,
which does not insert a new document when no match is found. 

Updating Documents: replaceOne() Lecture Notes:

Important aspect to consider about replaceOne:

    The replacement document cannot contain update operators.
    replaceOne will apply changes to only one document, the first found
	in the server that matches the filter expression, using the $natural order
	of documents in the collection.

replaceOne() documentation
  
Chapter 2: The MongoDB Query Language + Atlas
Lab 2.6: Update Operators
Problem:
Suppose you wish to update the value of the plot field for one document in our movieDetails collection
 to correct a typo. Which of the following update operators and modifiers would you need to use to do this?
Attempts Remaining:2 Attempts left
$set 		Sets the value of a field in a document. ++++ Right answer!!! :)))
$position	Modifies the $push operator to specify the position in the array to add elements. 
$push		Adds an item to an array. 
$inc		Increments the value of the field by the specified amount. 
$mul		Multiplies the value of the field by the specified amount.
$unset		Removes the specified field from a document.
$rename		Renames a field.
$slice		Modifies the $push operator to limit the size of updated arrays.
$addToSet  	Adds elements to an array only if they do not already exist in the set. ???

By default, the update() method updates a single document. Set the Multi Parameter to update all documents
 that match the query criteria.
The update() method has the following form:

db.collection.update(
   <query>,
   <update>,
   {
     upsert: <boolean>,
     multi: <boolean>,
     writeConcern: <document>,
     collation: <document>,
     arrayFilters: [ <filterdocument1>, ... ]
   }
)

---------------
db.collection.deleteOne()
db.collection.deleteMany()

Final Exam ------------------------------
Final Exam: Question 1

Problem:
Connect to our class Atlas cluster from Compass and view the citibike.trips collection. Use the schema view and any filters you feel are necessary to determine the range of values for the usertype field. Which of the following are values found in this collection for the field usertype?

Check all answers that apply:

Attempts Remaining:∞Unlimited Attempts
null
"Customer"
"Anonymous"
"Subscriber"
"Pay As You Go"

Final Exam: Question 2

Problem:
Connect to our class Atlas cluster from Compass and view the 100YWeatherSmall.data collection. Using the Schema view, explore the wind field. The wind field has the value type of document. Which of the following best describes the schema of this embedded document?

Choose the best answer:

Attempts Remaining:∞Unlimited Attempts
Three fields -- all with the value type "document"
Three fields -- two with the value type "document", one with the value type "string"
Two fields -- one field with the value type "string", one with a value type of "document"
Two fields -- both with the value type "document"

Final Exam: Question 3

Problem:
Connect to the M001 class Atlas cluster from Compass and view the 100YWeatherSmall.data collection. What is the value type of the "wind.speed.rate" field?

Choose the best answer:

Attempts Remaining:∞Unlimited Attempts
document
double
array
int32
string

Final Exam: Question 4

Problem:

Please connect to the M001 class Atlas cluster. You may answer this question using either the mongo shell or Compass.

For this question we will use the citibike database.

How many documents in the citibike.trips collection have the key tripduration set to null? Ignore any documents that do not contain the tripduration key.

Choose the best answer:

Attempts Remaining:∞Unlimited Attempts
2
3
11
47
114

Final Exam: Question 5

Problem:

Using the video.movieDetails collection, which of the queries below would produce output documents that resemble the following. Check all that apply.

{ "title" : "P.S. I Love You" }
{ "title" : "Love Actually" }
{ "title" : "Shakespeare in Love" }

NOTE: We are not asking you to consider specifically which documents would be output from the queries below, but rather what fields the output documents would contain.

Check all answers that apply:

Attempts Remaining:∞Unlimited Attempts
db.movieDetails.find({year: 1964}, {title: 1, _id: 0})
db.movieDetails.find({}, {title})
db.movieDetails.find({}, {title: 1, _id: 0})
db.movieDetails.find({}, {title: 1})
db.movieDetails.find({title: ""}, {title: 1})
db.movieDetails.find({title: "Muppets from Space"}, {title: 1})

Final Exam: Question 6

Problem:

Please connect to the M001 class Atlas cluster from the mongo shell or Compass and view the video.movies collection. How many movies match the following criteria?

    The cast includes either of the following actors: "Jack Nicholson", "John Huston".
    The viewerRating is greater than 7.
    The mpaaRating is "R".

Choose the best answer:

Attempts Remaining:∞Unlimited Attempts
1
5
8
19
26

------------- Prep -----
Comparison:
db.inventory.find( { qty: { $gt: 20 } } )
db.inventory.update( { "carrier.fee": { $gt: 2 } }, { $set: { price: 9.99 } } )

Query Selectors:
https://docs.mongodb.com/manual/reference/operator/query/#query-selectors
$in: [] always array one or more!
db.movieDetails.find({writers: {$in: ["Ethan Coen", "Joel Coen"]}}).count() -> 3 one of writers in list ...

Exists and Not Equal To
Consider the following example:
db.inventory.find( { qty: { $exists: true, $nin: [ 5, 15 ] } } )
$exists - matches the documents that contain the field, including documents where the field
 value is null. If <boolean> is false, the query returns only the documents that do not contain the field.

$type  -> { field: { $type: <BSON type> } } selects the documents where the value of the 
field is an instance of the specified BSON type(s)


Logical Operators:
The $or operator performs a logical OR operation on an array of two or more <expressions>
 and selects the documents that satisfy at least one of the <expressions>. 
db.inventory.find( { $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] } )  

Problem:
Connect to our class Atlas cluster from the mongo shell or Compass and view the ships.shipwrecks
 collection. In this collection, watlev describes the water level at the shipwreck site and depth
 describes how far below sea level the ship rests. How many documents in the ships.shipwrecks 
 collection match either of the following criteria: watlev equal to "always dry" or depth equal to 0.
Solution: 
db.shipwrecks.find({$or: [{watlev: {$eq: "always dry"}}, {depth: {$eq: 0}}]}).pretty()

















>>>>>>> b8c4037a3b1334a855747c98253d49e1468ab94f






