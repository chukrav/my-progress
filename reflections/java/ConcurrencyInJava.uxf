<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>12</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>108</x>
      <y>0</y>
      <w>504</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*Concurrency in Java. S-15*
valign=center
fontsize=24
lw=3.5
fg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>144</y>
      <w>324</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>_Thread (267)_
--
join() read docs. Joins another thread
and execute ... ? 
interrupt() - sends interruption ?!
bg=gray
fg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>12</x>
      <y>348</y>
      <w>324</w>
      <h>336</h>
    </coordinates>
    <panel_attributes>_Sinchronized (271)_
--
Methods: wait, notify 
and notify all

class MClass implements Runable{}
new Tread(MyClass).start();

 synchronized (buffer) {
     buffer.add(num);
} &lt;- get problem section in synchronized()

Use-&gt; ReentrantLock bufferLock;
bufferLock.lock();
......
bufferLock.unlock();
if (bufferLock.tryLock()) - better!!!</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>204</x>
      <y>276</y>
      <w>240</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=.
Synchronize only
what have to be sinchronized
fontsize=10
fg=red
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>108</x>
      <y>300</y>
      <w>120</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;40.0;80.0;18.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>372</x>
      <y>348</y>
      <w>396</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>_Thread Pool_
--
ExecutorService executorService = 
    Executors.newFixedThreadPool(3);
executorService.execute(r);</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>372</x>
      <y>456</y>
      <w>396</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>_Thread_
--
Thread t1 = ...
t1.setPriority(10); 
t2.setPriority(2); &lt;- set priority
Not necessary by suggested order ...
10, 8, 2, 6, ...
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>372</x>
      <y>600</y>
      <w>432</w>
      <h>132</h>
    </coordinates>
    <panel_attributes>_Thread_
--
ReentrantLock lock = new ReentrantLock(true);
lock.lock()
try {} final{ lock.unlock() } &lt;--!!!
*Keeps priority in order...* Solved starvation problem
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1200</x>
      <y>60</y>
      <w>504</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*Lambda Expressions. S-16*
valign=center
fontsize=24
lw=3.5
fg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>960</x>
      <y>204</y>
      <w>516</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>*Interface - Functional method, returns,chained*
Consumer - accept(1 or 2) No    Y
Predicate - test(1 or 2)  Y bool Y
Supplier - get()              Y      N
Function - apply(1 or 2) Y      Y
UnaryOperator ...          Y      Y
bg=yellow
fontsize=18
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1512</x>
      <y>204</y>
      <w>504</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>_*Streams*_
--
        gNumbers.sort((s1, s2) -&gt; s1.compareTo(s2));
        gNumbers.forEach(s -&gt; System.out.println(s));
--
        someBingoNumbers.stream()
                .map(String::toUpperCase)      // More cool!!!
                .map(s -&gt; s.toUpperCase())     // Makes same thing
                .filter(s -&gt; s.startsWith("G"))
                .sorted()
                .forEach(System.out::println);

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLUseCase</id>
    <coordinates>
      <x>1224</x>
      <y>432</y>
      <w>324</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>*Can be chained only streams*
fg=red
bg=yellow</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1380</x>
      <y>312</y>
      <w>240</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
fg=red</panel_attributes>
    <additional_attributes>180.0;10.0;10.0;100.0</additional_attributes>
  </element>
</diagram>
