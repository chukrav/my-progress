17:40 Monday, January 21, 2019 -----------
Some of The Most Important SQL Commands

    SELECT - extracts data from a database
    UPDATE - updates data in a database
    DELETE - deletes data from a database
    INSERT INTO - inserts new data into a database
    CREATE DATABASE - creates a new database
    ALTER DATABASE - modifies a database
    CREATE TABLE - creates a new table
    ALTER TABLE - modifies a table
    DROP TABLE - deletes a table
    CREATE INDEX - creates an index (search key)
    DROP INDEX - deletes an index
SELECT:
The SELECT DISTINCT statement is used to return only distinct (different) values.
SELECT DISTINCT column1, column2, ... FROM table_name; 
SELECT Country FROM Customers; - only Country column ...
SELECT DISTINCT Country FROM Customers;

The following SQL statement lists the number of different (distinct) customer countries:
SELECT COUNT(DISTINCT Country) FROM Customers;
Not working in fifox !!!
SELECT Count(*) AS DistinctCountries FROM (SELECT DISTINCT Country FROM Customers);

I am on: SQL WHERE Clause!
SELECT column1, column2, ...
FROM table_name
WHERE condition;
Example ------------------
SELECT * FROM Customers
WHERE Country='Mexico'; 

Operators in The WHERE Clause

The following operators can be used in the WHERE clause:
Operator 	Description
= 	Equal
<> 	Not equal. Note: In some versions of SQL this operator may be written as !=
> 	Greater than
< 	Less than
>= 	Greater than or equal
<= 	Less than or equal
BETWEEN 	Between a certain range
LIKE 	Search for a pattern
IN 	To specify multiple possible values for a column

The SQL AND, OR and NOT Operators
Combining AND, OR and NOT
SELECT * FROM Customers
WHERE Country='Germany' AND (City='Berlin' OR City='MÃ¼nchen'); 
SELECT * FROM Customers
WHERE NOT Country='Germany' AND NOT Country='USA'; 

ORDER BY Syntax
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC; --------------

SELECT * FROM Customers
ORDER BY Country;
ORDER BY Several Columns Example: SELECT * FROM Customers ORDER BY Country, CustomerName; 
SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC; 

The SQL INSERT INTO Statement-------------------------
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...); 
If you are adding values for all the columns of the table, you do not need to specify the column names
INSERT INTO table_name
VALUES (value1, value2, value3, ...); 
INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

INSERT INTO Customers (CustomerName, City, Country)
VALUES ('Cardinal', 'Stavanger', 'Norway');
Result:
92 	Cardinal 	null 	null  	Stavanger 	null 	Norway

SQL NULL Values --------------------
IS NULL Syntax:
SELECT column_names
FROM table_name
WHERE column_name IS NULL; 

IS NOT NULL Syntax
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL; 

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

18:29 Tuesday, January 22, 2019
I am on: SQL UPDATE Statement

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition; 

UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;

DELETE Syntax ----------
DELETE FROM table_name WHERE condition;
DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

Delete All Records:
It is possible to delete all rows in a table without deleting the table.
This means that the table structure, attributes, and indexes will be intact:
DELETE FROM table_name;

SQL SELECT TOP ----------
The SELECT TOP clause is used to specify the number of records to return.

MySQL Syntax:
SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number; 

SELECT * FROM Customers
LIMIT 3; 
The following SQL statement shows the equivalent example using ROWNUM:
SELECT * FROM Customers
WHERE ROWNUM <= 3;

The following SQL statement selects the first 50% of the records from the "Customers" table:
SELECT TOP 50 PERCENT * FROM Customers;

The following SQL statement selects the first three records from the "Customers" table, where the country is "Germany":
SELECT TOP 3 * FROM Customers
WHERE Country='Germany';

The following SQL statement shows the equivalent example using the LIMIT clause:
SELECT * FROM Customers
WHERE Country='Germany'
LIMIT 3; 

SELECT * FROM Customers
WHERE Country='Germany' AND ROWNUM <= 3;

SQL MIN() and MAX() Functions ---------------
SELECT MIN(column_name)
FROM table_name
WHERE condition; 

SELECT MAX(Price) AS LargestPrice
FROM Products; 

SQL COUNT(), AVG() and SUM() -------------
SELECT COUNT(column_name)
FROM table_name
WHERE condition; 

SELECT AVG(column_name)
FROM table_name
WHERE condition; 

SELECT SUM(column_name)
FROM table_name
WHERE condition;

SELECT AVG(Price)
FROM Products;

SQL LIKE Operator ----------
LIKE Syntax
SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern; 

LIKE Operator 	Description
WHERE CustomerName LIKE 'a%' 	Finds any values that start with "a"
WHERE CustomerName LIKE '%a' 	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%' 	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%' 	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%_%' 	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o' 	Finds any values that start with "a" and ends with "o"

The following SQL statement selects all customers with a CustomerName that does NOT start with "a":
SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';


    % - The percent sign represents zero, one, or multiple characters
    _ - The underscore represents a single character

Using the _ Wildcard
The following SQL statement selects all customers with a City starting with any character, followed by "erlin":
SELECT * FROM Customers
WHERE City LIKE '_erlin';	

In MS Access and SQL Server you can also use:
    [charlist] - Defines sets and ranges of characters to match
    [^charlist] or [!charlist] - Defines sets and ranges of characters NOT to match

SQL IN Operator ----------
The IN operator is a shorthand for multiple OR conditions.
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...); 	

or:
SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT); 

SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

The following SQL statement selects all customers that are from the same countries as the suppliers:
SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);

I am on: 17:56 Thursday, January 24, 2019
SQL BETWEEN Operator ----------












