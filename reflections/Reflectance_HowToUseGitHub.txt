cd H:/Backup/Udacity/my-progress
cd /h/Backup/Udacity/D/ud851-Sunshine
------- Setting Up Your Workspace on Windows -------
Downloading necessary files

    Save this file in your home directory with the name git-completion.bash. (https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash)
    Save this file in your home directory with the name git-prompt.sh. (https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh)
    Download bash_profile_course from the Downloadables section.
    If you already have a file in your home directory named .bash_profile, copy the content
	from bash_profile_course and paste it at the bottom of .bash_profile.
	Otherwise, move bash_profile_course to your home directory and rename it to .bash_profile.
	(If you're curious to learn more about how bash prompts work, see this page.) (http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html)
	
	
	--- Making Git configurations ---
	The first one will need to be modified if you are using a text editor other than Sublime, 
	or if Sublime is installed in another location for you. See this page for the correct command (https://help.github.com/articles/associating-text-editors-with-git/)
	for a couple of other popular text editors. For any other editor, you'll need to enter the command
	you use to launch that editor from Git Bash.
	
	  git config --global core.editor "'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w"
      git config --global push.default upstream
      git config --global merge.conflictstyle diff3
	  
	Make sure you can start your editor from Git Bash
		If you use Sublime, you can do this by adding the following line to your .bash_profile:
		
		alias subl="C:/Program\ Files/Sublime\ Text\ 2/sublime_text.exe"

	Restart Git Bash: You'll need to close and re-open Git Bash before all your changes take effect.  
	
	--- Staging Area ---
	$ git reset 
	If you accidentally add a file to the staging area, you can remove it using git reset.
	
	git init
    git add
    git status
    staging area
    working directory
	
	$ git commit -m "Commit message" 
	
	Udacity Git Commit Message Style Guide (http://udacity.github.io/git-styleguide/)
	$ git checkout master 
		-before you commit a bag fix. This is because your HEAD is still 'detached' ... 

	Merge conflict (Newline characters between Windows and Unix systems)
	$ git config --global core.autocrlf true
	
	Comparing a commit to its parent
	$ git show commit_id
	
	$ git log --graph
	
	$ git checkout easy-mode
	$ git merge master easy-mode -> conflict
	
	make changes, add ., commit -> to merge message, O'k!
	
	$ git pull origin master -sinchronize master to origin 
	
	$ git config --global core.editor "'f:/Utils/Editors/npp.6.8.7/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
	alias npp="d:/Utils/Editors/npp.6.8.7/notepad++.exe"	
	$ git config --global credential.helper cache  - store user password
	
	
	Password was changed: fatal: unable to access 
	To fix this, you can use
	git config --global credential.helper osxkeychain
	You'll then be prompted for your password again.

	For Windows, it's the same command with a different argument:
	git config --global credential.helper wincred


	
	
	This will revert all local uncommitted changes (should be executed in repo root):
	$ git checkout .  (point is impotant! )
	
	This will unstage all files you might have staged with git add:
	$ git reset
	
	https://stackoverflow.com/questions/35942754/how-to-save-username-and-password-in-git
	How to save username and password in git:
	
	git config credential.helper store
		then:
	git pull

	provide user-name and password and those details will be remembered later. The credentials are stored
	in the disk, with the disk permissions.
	if you want to change password later:

	git config credential.helper store 
	then:
	git pull

	provide new password and it will work like before.
	
	$ git checkout -b lesson-five origin/lesson-five  add untracced branch from origin

	If you wish to set tracking information for this branch you can do so with:
    git branch --set-upstream-to=origin/<branch> student
	used: 
	git branch --set-upstream-to=origin/student student
	>Branch 'student' set up to track remote branch 'student' from 'origin'.
	
Git force pull to overwrite local files:
	git fetch --all
	git reset --hard origin/master
	git pull origin master
	
Really the ideal way to do this is to not use pull at all, but instead fetch and reset:
https://stackoverflow.com/questions/9589814/how-do-i-force-git-pull-to-overwrite-everything-on-every-pull/9589927

	git fetch origin master
	git reset --hard FETCH_HEAD
	git clean -df

(Altering master to whatever branch you want to be following.)	
-----------
https://itsyndicate.org/blog/how-to-use-git-force-pull-properly/
git fetch origin master
git reset --hard origin/master

(If you are working with branches, use the branch name instead of master branch).

----------------------------- Get rid of some files to your git repository ----------
Let’s say you have already added/committed some files to your git repository
and you then add them to your .gitignore; these files will still be present in your repository index.
This article we will see how to get rid of them.
Step 1: Commit all your changes
Step 2: Remove everything from the repository

git rm -r --cached .

    rm is the remove command
    -r will allow recursive removal
    –cached will only remove files from the index. Your files will still be there.
    The . indicates that all files will be untracked. You can untrack a specific file with
	git rm --cached foo.txt (thanks @amadeann).
The rm command can be unforgiving. If you wish to try what it does beforehand, 
add the -n or --dry-run flag to test things out.

Step 3: Re add everything
git add .

Step 4: Commit
git commit -m ".gitignore fix"

Your repository is clean :)
--------------------------------------------------------
To squash comments:
	$ git rebase -i 3b59976             <-[Num of last line]
	or
	$ git rebase --interactive HEAD~N   <-[N - of lines]
	$ git rebase --interactive HEAD~[7]
	
	pick d94e78 Prepare the workbench for feature Z     --- older commit
	s 4e9baa Cool implementation 
	. . . . . .  .
	You can leave it as it is and the commit message will result in a list of all the intermediate commits, as follows:
	Usually I don't care to keep such information, so I wipe out the default message and use something more self-explanatory
	like Implemented feature Z.
		
	$ git push --force-with-lease origin tabdb

	
